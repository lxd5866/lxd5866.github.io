<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 沧海的博客</title>
    <link>https://lxd5866.github.io/post/</link>
    <description>Recent content in Posts on 沧海的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 14 Dec 2020 23:47:11 +0800</lastBuildDate><atom:link href="https://lxd5866.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>pilot 压力测试【小记】</title>
      <link>https://lxd5866.github.io/post/2020-12-14-3/</link>
      <pubDate>Mon, 14 Dec 2020 23:47:11 +0800</pubDate>
      
      <guid>https://lxd5866.github.io/post/2020-12-14-3/</guid>
      <description>1. 压测方案 简述 模拟在20w pod、15w CR、每秒1200+ pod变更事件的压力下进行全机房odp重启的模拟测试 具体流程 Pilot启动时向APISerer list/watch并进行初始化，完成后对外提供服务 压力机模拟 sidecar 向Pilot发起grpc建链 压力机向Pilot发起请求 Pilo</description>
    </item>
    
    <item>
      <title>Envoy proto 生成 go-control-plane</title>
      <link>https://lxd5866.github.io/post/2020-12-14-1/</link>
      <pubDate>Mon, 14 Dec 2020 21:47:11 +0800</pubDate>
      
      <guid>https://lxd5866.github.io/post/2020-12-14-1/</guid>
      <description>背景 envoy proto 生成依赖bazel 等工具，需要从google code仓库拉代码，国内编译比较麻烦， 所以cache了构建bazel 环境需要的基础镜像，方便proto生成，免得每次都要从头安装依赖，节省时间，提高效率。 用法 Dockerfile FROM envoyproxy/envoy-build-ubuntu:c666a8ebe472c66038fd07772ab96ed48e621883 RUN git clone https://github.com/envoyproxy/envoy source &amp;amp;&amp;amp; \ cd /source &amp;amp;&amp;amp; \ git checkout c0ab3a4374144728c1e193fc2d43951ed36ccdb7 RUN ./tools/api/generate_go_protobuf.py || true WORKDIR /source 打包好的docker image registry.cn-hangzhou.aliyuncs.com/lxd/envoy-generate-cache:v1</description>
    </item>
    
    <item>
      <title>Go插件plugin</title>
      <link>https://lxd5866.github.io/post/2020-12-09-3/</link>
      <pubDate>Wed, 09 Dec 2020 21:47:11 +0800</pubDate>
      
      <guid>https://lxd5866.github.io/post/2020-12-09-3/</guid>
      <description>Go插件plugin 背景 项目需要在不给项目源码的情况下，给三方做拓展。实现方案是通过配置，加载plugin，调用约定好的方法实现特定的业务场景 原文地址 1. Go plugin是什么 Go 1.8版本开始提供了一个创建共享库的新工具,称为 Plugins. A plugin is a Go main package with exported functions and variables that has been built with: go build -buildmode=plugin Plugin插件</description>
    </item>
    
    <item>
      <title>helm3 和 kustomize </title>
      <link>https://lxd5866.github.io/post/2020-12-07-1/</link>
      <pubDate>Mon, 07 Dec 2020 19:36:45 +0800</pubDate>
      
      <guid>https://lxd5866.github.io/post/2020-12-07-1/</guid>
      <description>helm3 kustomize 背景 之前一直用的时kustomize 管理 yaml，而不太喜欢使用helm，因为感觉它对外对外是一个黑盒，用起来不太放心。 而istio自 1.8 版本开始，重新添加 helm3为默认的管理工具，最近在看的 openkruise 也是使用helm管理，所以还是决定花点时间看一下。</description>
    </item>
    
    <item>
      <title>k8s Docker Runtime架构</title>
      <link>https://lxd5866.github.io/post/2020-12-09-1/</link>
      <pubDate>Mon, 07 Dec 2020 19:36:45 +0800</pubDate>
      
      <guid>https://lxd5866.github.io/post/2020-12-09-1/</guid>
      <description>背景 k8s 1.20 release note中有个改变的针对Dockershim的，自这个版本起不在推荐使用docker做runtime。 Docker as an underlying runtime is being deprecated. Docker-produced images will continue to work in your cluster with all runtimes, as they always have. The Kubernetes community has written a blog post about this in detail with a dedicated FAQ page for it. 所以详细了解了一下 Dockershim 的历史。 本文链接：https://blog.csdn.net/</description>
    </item>
    
    <item>
      <title>git 代理</title>
      <link>https://lxd5866.github.io/post/2020-12-04-1/</link>
      <pubDate>Fri, 04 Dec 2020 00:37:55 +0800</pubDate>
      
      <guid>https://lxd5866.github.io/post/2020-12-04-1/</guid>
      <description>git 代理设置 背景 下载github资源时，会因为墙和dns等原因导致git下载速度感人,游戏体验极差。 分辨需要设置的代理 HTTP 形式： git clone https://github.com/owner/git.git SSH 形式： git clone git@github.com:owner/git.git 一、HTTP 形式 走 HTTP 代理 git config &amp;ndash;global http.proxy &amp;ldquo;http://127.0.0.1:8080&amp;rdquo; git config &amp;ndash;global https.proxy &amp;ldquo;http://127.0.0.1:8080&amp;rdquo; 走 socks5 代理（如 Shadowsocks） git config &amp;ndash;global http.proxy &amp;ldquo;socks5://127.0.0.1:1080&amp;rdquo; git config &amp;ndash;global https.proxy &amp;ldquo;socks5://127.0.0.1:1080&amp;rdquo; 取消设置 git config &amp;ndash;global &amp;ndash;unset http.proxy git config &amp;ndash;global &amp;ndash;unset https.proxy 二、SS</description>
    </item>
    
    <item>
      <title>minikube 加速</title>
      <link>https://lxd5866.github.io/post/2020-12-02-1/</link>
      <pubDate>Wed, 02 Dec 2020 01:08:50 +0800</pubDate>
      
      <guid>https://lxd5866.github.io/post/2020-12-02-1/</guid>
      <description>minikube 使用 &amp;amp; 加速 背景 minikibe 是由谷歌官方的，k8s本地模拟环境，主要用作 k8s 的环境测试工作。 minikube implements a local Kubernetes cluster on macOS, Linux, and Windows. minikube&#39;s primary goals are to be the best tool for local Kubernetes application development and to support all Kubernetes features that fit. 安装 brew install minikube brew 可以使用清华源加速 使用 一般情况下 1 2 3 4 5 6 7 //加速，建议使用自己的加速起，不推荐使用阿里源 //速度由梯子决定 export HTTP_PROXY=http://127.0.0.1:20880 export HTTPS_PROXY=http://127.0.0.1:20880 export</description>
    </item>
    
    <item>
      <title>使用zap接收gin框架默认的日志并配置日志归档</title>
      <link>https://lxd5866.github.io/post/2020-11-24-1/</link>
      <pubDate>Tue, 24 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://lxd5866.github.io/post/2020-11-24-1/</guid>
      <description>| Golang 本文介绍了在基于gin框架开发的项目中如何配置并使用zap来接收并记录gin框架默认的日志和如何配置日志归档。 我们在基于gin框架开发项目时通常都会选择使用专业的日志库来记录项目中的日志，go语言常用的日志库有zap、logrus等。网上也有很多类似的教程，我之前也翻译过一篇</description>
    </item>
    
    <item>
      <title>关于</title>
      <link>https://lxd5866.github.io/post/about/</link>
      <pubDate>Sat, 07 Nov 2020 19:36:45 +0800</pubDate>
      
      <guid>https://lxd5866.github.io/post/about/</guid>
      <description>写在最前 面向兴趣编程，代码虐我千百遍，我待代码如初恋。 现在主要在做方向是k8s拓展，service mesh 落地等，对 k8s , istio 比较熟悉，基本能读源码能写拓展能定制自己逻辑的阶段。 未来主要还是想做这方面比较偏底层有技术挑战性的方向。</description>
    </item>
    
    <item>
      <title>Golang pprof 调试</title>
      <link>https://lxd5866.github.io/post/2020-12-14-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lxd5866.github.io/post/2020-12-14-2/</guid>
      <description>背景 分析 pilot 运行时内存占用大的原因 用法 生成 profile file 1 2 3 4 5 6 7 go tool pprof -inuse_space http://app_ip:port/debug/pprof/heap //文件会生产到 /Users/用户名/pprof/下 (pprof) (pprof)nodefraction=0.05 //过滤数量 (pprof) (pprof)sample_index=inuse_space // 切换 [alloc_objects alloc_space inuse_objects inuse_space] (pprof)web //打开web页面 比较两个文件,常用在资源发生变化时比较消耗的原因 1 go tool pprof --base 002.pb.gz .pb.gz 直接分析某个文件 1 2 //可以查看各种图表 so</description>
    </item>
    
  </channel>
</rss>
