<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on 沧海的博客</title>
    <link>https://lxd5866.github.io/categories/Golang/</link>
    <description>Recent content in Golang on 沧海的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh</language>
    <lastBuildDate>Mon, 14 Dec 2020 22:47:11 +0800</lastBuildDate><atom:link href="https://lxd5866.github.io/categories/Golang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Golang pprof 调试</title>
      <link>https://lxd5866.github.io/post/2020-12-14-3/</link>
      <pubDate>Mon, 14 Dec 2020 22:47:11 +0800</pubDate>
      
      <guid>https://lxd5866.github.io/post/2020-12-14-3/</guid>
      <description>1. 压测方案 简述 模拟在20w pod、15w CR、每秒1200+ pod变更事件的压力下进行全机房odp重启的模拟测试 具体流程 Pilot启动时向APISerer list/watch并进行初始化，完成后对外提供服务 压力机模拟 sidecar 向Pilot发起grpc建链 压力机向Pilot发起请求 Pilo</description>
    </item>
    
    <item>
      <title>Envoy proto 生成 go-control-plane</title>
      <link>https://lxd5866.github.io/post/2020-12-14-1/</link>
      <pubDate>Mon, 14 Dec 2020 21:47:11 +0800</pubDate>
      
      <guid>https://lxd5866.github.io/post/2020-12-14-1/</guid>
      <description>背景 envoy proto 生成依赖bazel 等工具，需要从google code仓库拉代码，国内编译比较麻烦， 所以cache了构建bazel 环境需要的基础镜像，方便proto生成，免得每次都要从头安装依赖，节省时间，提高效率。 makefile FROM envoyproxy/envoy-build-ubuntu:c666a8ebe472c66038fd07772ab96ed48e621883 RUN git clone https://github.com/envoyproxy/envoy source &amp;amp;&amp;amp; \ cd /source &amp;amp;&amp;amp; \ git checkout c0ab3a4374144728c1e193fc2d43951ed36ccdb7 RUN ./tools/api/generate_go_protobuf.py || true WORKDIR /source 打包好的docker image registry.cn-hangzhou.aliyuncs.com/lxd/envoy-generate-cache:v1 用法</description>
    </item>
    
    <item>
      <title>Go插件plugin</title>
      <link>https://lxd5866.github.io/post/2020-12-09-3/</link>
      <pubDate>Wed, 09 Dec 2020 21:47:11 +0800</pubDate>
      
      <guid>https://lxd5866.github.io/post/2020-12-09-3/</guid>
      <description>Go插件plugin 背景 项目需要在不给项目源码的情况下，给三方做拓展。实现方案是通过配置，加载plugin，调用约定好的方法实现特定的业务场景 原文地址 1. Go plugin是什么 Go 1.8版本开始提供了一个创建共享库的新工具,称为 Plugins. A plugin is a Go main package with exported functions and variables that has been built with: go build -buildmode=plugin Plugin插件</description>
    </item>
    
    <item>
      <title>Golang pprof 调试</title>
      <link>https://lxd5866.github.io/post/2020-12-14-2/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://lxd5866.github.io/post/2020-12-14-2/</guid>
      <description>背景 分析 pilot 运行时内存占用大的原因 用法 生成 profile file 1 2 3 4 5 6 7 go tool pprof -inuse_space http://app_ip:port/debug/pprof/heap //文件会生产到 /Users/用户名/pprof/下 (pprof) (pprof)nodefraction=0.05 //过滤数量 (pprof) (pprof)sample_index=inuse_space // 切换 [alloc_objects alloc_space inuse_objects inuse_space] (pprof)web //打开web页面 比较两个文件,常用在资源发生变化时比较消耗的原因 1 go tool pprof --base 002.pb.gz .pb.gz 直接分析某个文件 1 2 //可以查看各种图表 so</description>
    </item>
    
  </channel>
</rss>
